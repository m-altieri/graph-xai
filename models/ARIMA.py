# -*- coding: utf-8 -*-
"""ARIMA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ENOC0YSZ28MIlfOB_IkjcMpzs0lA7X0R
"""

import pmdarima as pm
import logging
import numpy as np

class ARIMA:
  """
  ARIMA (AutoRegressive Integrated Moving Average) model implementation, using the pmdarima library to automatically find the optimal parameters.
  This class complies to the interface used for the other models, with fit, predict and compile, and also set_node like like for GCNLSTM.
  The model is initialized when the object is instantiated, and is never reset.
  """
  def __init__(self, node=0):
    self.logger = logging.getLogger(__name__)
    self.logger.info(__name__ + ' initializing with node=' + str(node))
    
    self.node = node
    self.model = None
    self.fitted_on = [] # Raw time series as they come from outside, i.e. with shape (S,H)

    self.logger.info(__name__ + ' initilized.')
    self.compiled = False

  def set_node(self, node):
    """
    Set the node to train and predict for.
    If never called, the default node will be 0.
    This model can only be trained for one node at a time.

    Parameters
    ----------
    node : int
        Node to set for training and prediction. Doesn't check for node validity.
    """
    self.node = node

  def fit(self, x, y, **kwargs):
    """
    Incrementally fits the model on the new given labels.

    Every call to fit() trains the model incrementally (i.e. the model is retrained on all previously seen instances every time fit() is called);
    in this way, it's natively compatible with the tf incremental training workflow used for the landmark evaluation.

    Parameters
    ----------
    x : any
        Unused.
    y : array
        Matrix of shape [Seqs, Steps, Nodes].
    """
    if len(self.fitted_on) != 0: 
      self.fitted_on = np.concatenate((self.fitted_on, x[...,0]), axis=0)
    else: 
      self.fitted_on = x[...,0]

    ts = np.ravel(self.fitted_on[..., self.node])  # Converti le label da formato (S,H) a (S*H,)
    self.logger.info(__name__ + ' total seen data of shape ' + str(np.shape(self.fitted_on)))
    self.logger.info(__name__ + ' fitting on series of shape ' + str(np.shape(ts)))
    self.model = pm.auto_arima(y=ts, start_p=1, start_q=1, start_P=1, start_Q=1, max_p=1, max_d=1, max_q=1, max_P=1, max_D=1, max_Q=1, trace=True)
      
  def predict(self, x, **kwargs):
    """
    Predicts the next labels.

    Parameters
    ----------
    x : array
        Matrix with shape [_,P,...], where P is the number of prediction steps, _ represents any axis dimension and '...' represents any number of axis.
    """

    return self.model.predict(n_periods=np.shape(x)[1])

  def compile (self, **kwargs):
    """
    Does nothing. It's added for compatibility reasons.
    """
    self.compiled = True
